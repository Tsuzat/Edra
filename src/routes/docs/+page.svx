# Introduction

Edra is a component based rich text editor built with
[Tiptap](https://tiptap.dev/) and [Svelte](https://svelte.dev/). It is designed to be highly
customizable and extensible, allowing developers to create their own custom editors with ease.

The main goal of Edra is to provide a **baseline** with minimum to no pre-configured components, yet highly customizable and extensible.

> Note:
>
> **Why is edra a component based library?**
>
> The main reason for this library is to provide the full control over the editor, allowing developers
> to create their own custom editors with ease. This is achieved by using the powerful
> [Tiptap](https://tiptap.dev/) library, which provides a rich set of features and customization options.
> This way the developers have the full control over the code and they can achieve anything with it.

---

# Installation

Edra comes with two ui floavors, `headless` and `shadcn`. The `headless` ui usage pure css with classes and the `shadcn` ui usage the [svelte-shadcn](https://next.shadcn-svelte.com/).

Choose which one you want to use.

1. [Installation with headless ui](/docs#installation-with-headless-ui)
2. [Installation with shadcn ui](/docs#installation-with-shadcn-ui)

---

## Installation with headless ui

For installation with headless ui, you can use the following command:

```sh
# For NPM
npx edra init headless
# For PNPM
pnpm dlx edra init headless
```

The above command will copy the `edra` component as folder in `src/lib/components/edra` and install the required dependencies.

---

## Installation with shadcn ui

> Warning:
>
> The **shadcn** ui flavor have some prerequisites, so please read the following instructions carefully.

### Prerequisites

The `shacn` ui based components usages the [svelte-shadcn](https://next.shadcn-svelte.com/) and [tailwind-typography](https://github.com/tailwindlabs/tailwindcss-typography) packages. You can find their respective installation guides in their documentation.

After installing the `svelte-shadcn` and `tailwind-typography` packages, you need to add the following `svelte-shadcn` components in your project.

```sh
# For NPM
npx shadcn-svelte@next add dropdown-menu button tooltip input popover
# using pnpm
pnpm dlx shadcn-svelte@next add dropdown-menu button tooltip input popover
```

After the installation of `svelte-shadcn` components, we can run following
command to install `edra` component with `shadcn` ui.

```sh
# For NPM
npx edra init shadcn
# For PNPM
pnpm dlx edra init shadcn
```

This command will copy the `edra` component as folder in `src/lib/components/edra` and install the required dependencies.

---

# Usage

The `Edra` library has following primary components:

- `<Edra>` - The main component that will render the editor.
- `<EdraToolbar>` - Used to render the toolbar.
- `<EdraBubbleMenu>` - Used to render the bubble menu.
- `<DragHandle>` - Used to render the drag handle.

## Structure

### Editor `<EdraEditor>`

The `<EdraEditor>` component is the core rich-text editor built on Tiptap. It initializes the editor with various extensions (such as code block highlighting, media placeholders, math rendering, etc.) and manages editor lifecycle events. It also supports advanced features such as a bubble menu (contextual toolbar) and slash commands.

```ts{f[$lib/components/edra/utils.ts]}
/**
 * Props for Edra's editor component
 */
export interface EdraEditorProps {
	content?: Content;
	editable?: boolean;
	editor?: Editor;
	autofocus?: boolean;
	onUpdate?: () => void;
	class?: string;
}
```

**Properties:**

- `class?: string` Additional classes to style the editor container.
- `content?: Content` The initial content for the editor.
- `editable?: boolean` Flag indicating if the editor should be editable (`true`) or read-only (`false`).
- `editor?: Editor` Bindable property to pass the editor instance to the `Edra` component.
- `onUpdate?` To update the content of the editor after a transaction is executed

<br />

### Toolbar `<EdraToolbar>`

The `<EdraToolbar>` component renders the editor's toolbar and displays a set of command buttons in a specific order.
The toolbar supports “special” toolbar components like font size, quick color, and search/replace.

```ts
export interface EdraToolbarProps {
	editor: Editor;
	class?: string;
	excludedCommands?: string[];
	children?: Snippet<[]>;
}
```

**Properties:**

- `class?: string` Additional classes to style the editor container.
- `editor?: Editor` Bindable property to pass the editor instance to the `Edra` component.
- `excludedCommands?: string[]` An array of command names to exclude from the toolbar. This allows you to customize which commands are shown.
- `children?` Allows for components to be passed directly to the toolbar (e.g., `<FontSize {editor} />`).

> Warning:
>
> If children components are passed to the `<EdraToolbar>` it will override the default set of toolbar commands.

### BubbleMenu `<EdraBubbleMenu {editor} />`

The `<EdraBubbleMenu>` component provides a floating formatting toolbar that appears when the user selects text within the editor. It gives quick access to inline formatting options like bold, italic, and code, and can be extended with custom components or actions using children.

> Info:
>
> The `<EdraBubbleMenu>` follows the same props as `<EdraToolbar>`, allowing you to customize its appearance and functionality.

> Warning:
>
> If children components are passed to the `<EdraBubbleMenu>` it will override the default set of toolbar commands.

---

## Examples

Below are example use cases for Shadcn and Headless:

- [Shadcn Basic Example](/docs#shadcn-basic-example)
- [Shadcn Advanced Example](/docs#shadcn-advanced-example)
- [Headless Basic Example](/docs#headless-basic-example)
- [Headless Advanced Example](/docs#headless-advanced-example)

### Shadcn Basic Example

A simple setup using the default Edra editor, toolbar, and bubble menu.

```svelte
<script lang="ts">
	import type { Content, Editor } from '@tiptap/core';
	import { EdraEditor, EdraToolBar, EdraDragHandleExtended } from '$lib/edra/shadcn/index.js';

	// Editor states
	let content = $state<Content>();
	let editor = $state<Editor>();

	function onUpdate() {
		content = editor?.getJSON();
	}
</script>

<div class="py-4 text-center text-xl font-bold">Shadcn Example</div>
	<div class="bg-background z-50 mt-12 size-full max-w-5xl rounded-md border border-dashed">
		{#if editor && !editor.isDestroyed}
			<EdraToolBar
				class="bg-secondary/50 flex w-full items-center overflow-x-auto border-b border-dashed p-0.5"
				{editor}
			/>
			<EdraDragHandleExtended {editor} />
		{/if}
		<EdraEditor
			bind:editor
			{content}
			class="h-[30rem] max-h-screen overflow-y-scroll pr-2 pl-6"
			{onUpdate}
		/>
	</div>
</div>
```

Explore more examples in github [here](https://github.com/Tsuzat/Edra/tree/main/src/routes/examples).

> Warning:
>
> You must need to create an editor instance, if you want to use `EdraToolBar` and/or `EdraBubbleMenu` component.

---

# Features

## JSON Output

You can controll the editor output without worrying about the initial `content` format.
The simplest way to do this is to use the `onUpdate` prop, which is a callback function that is called when the `content` is updated.

For the JSON output, you can use following example code:

```ts{h[2]%f[my-editor.svelte]}
function onUpdate() {
	const myOutput = editor?.getJSON();
	// save the output in your preferred way
	saveContent(myOutput);
}
```

## HTML Output

Similar to JSON output, you can also get the HTML output of the editor in `onUpdate` callback function.

```ts{h[2]%f[my-editor.svelte]}
function onUpdate() {
	const myOutput = editor?.getHTML();
	// save the output in your preferred way
	saveContent(myOutput);
}
```

---

## Slash Command

The `SlashCommand` is a feature that allows you to add custom commands to the editor.
It is a powerful feature that allows you to add custom commands to the editor,
which can be used to perform various actions, like inserting `images`, `videos`, `audios`, `tables`, `code blocks`, etc. You can use in by pressing the `/` key and then simply start typing the command name.

> Note:
>
> You can use `ArrowDown`, `crtl+j` or `cmd+j`, `Tabs` to navigate down
> and `ArrowUp`, `ctrl+k` or `cmd+k` to navigate up. Use `enter` to select the command.

Try it out in [demo](/)

---

## Bubble Menu

The `Edra` component comes with `Notion` like bubble menus. There are basically 4 bubble menus in action.

1. Editor Menu: Provides basic editor actions like `EdraToolBar`
2. Link Menu: Provides link related actions like copy, delete, edit, etc.
3. Table Row Menu: Provides table row related actions like insert, delete, etc.
4. Table Col Menu: Provides table column related actions like insert, delete, etc.

> Info:
>
> You need to use the `EdraBubbleMenu` component to enable the bubble menu in the editor.

Try it out in [demo](/)

---

## Font Size

`Edra` component provides a way to change the font size of the editor.
In `headless` ui, you'll find a decrease and increase button in the editor toolbar.
In `shadcn` ui, you'll find a dropdown menu in the editor toolbar.

In either case, you can change the font size of any text in the editor.

Try it out in [demo](/)

---

## Placeholder

`Edra` component provides a way to add placeholder text to the editor.
This is a `ghost` text and can be seen in an empty line. You can change the behavior of the
placeholder as per your liking in `$lib/components/edra/editor.ts` file in **your project**.

You can also find the same file here in [github](https://github.com/Tsuzat/Edra/blob/next/src/lib/edra/editor.ts).

Try it out in [demo](/)

---

## Code Block Extended

`Edra` component provides a way to extend the `code block` feature. You can add a language selector and copy the code to clipboard. For code highlighting, we're using lowlight with `one-dark` and `one-light` themes, for both `dark` and `light` mode respectively. You can find the file for `onedark.css` in `$lib/components/edra/onedark.css` file in **your project**.

You can also find the same file here in [github](https://github.com/Tsuzat/Edra/blob/next/src/lib/edra/onedark.css).

> Info:
>
> By default, tiptap does not provide a way to select the language or to copy the code.
> We have extended this functionality in `Edra` component to better UX.

> Warning:
>
> We use `html .dark` css selector to apply the `dark` mode theme to the code block.
> If you feel like to change the css selector, you need to change it in `onedark.css` file.

Try it out in [demo](/)

---

## Image Extended

`Edra` component let's you add an image in different ways. You can add an image link or
select an image from your local machine and add it to the editor. Moreover, you can also
add an image from your clipboard. `Edra` provides an `ImagePlaceholder` component which let's you put a placeholder for future references.

`Edra` lets you paste an image of upto 2MB in size. You can change this behavior by changing the `maxSize` value in `getHandlePaste` function in `$lib/components/edra/editor.ts` file in **your project**. You can also find the same file here in [github](https://github.com/Tsuzat/Edra/blob/next/src/lib/edra/editor.ts).

You can specify the image `maxSize` in this manner:

```ts{h[4]%f[$lib/components/edra/editor.ts]}
editor.setOptions({
	editorProps: {
		// maximum 3 MBs
		handlePaste: getHandlePaste(editor, 3)
	}
});
```

> Info:
>
> **What if I want to process the pasted image?**
> You may want to do some additional processing when user pastes an image.
> For that you can modify the `getHandlePaste` function in `$lib/components/edra/utils.ts` file in **your project**.
> You can also find the same file here in [github](https://github.com/Tsuzat/Edra/blob/next/src/lib/edra/utils.ts).

Try it out in [demo](/)

---

## Video Extended

Similar to `ImageExtended`, you can add a video in different ways.
You can add a **video link or select a video from your local machine** and add it to the editor.
`Edra` provides a `VideoPlaceholder` component which let's you put a placeholder for future references.

> Warning:
>
> You can not paste a video in editor from clipboard. You need to upload the video from your local machine, or provide a link to the video.

Try it out in [demo](/)

---

## Audio Extended

Similar to `ImageExtended` and `VideoExtended`, you can add an audio in different ways.
You can add an **audio link or select an audio from your local machine** and add it to the editor.
`Edra` provides an `AudioPlaceholder` component which let's you put a placeholder for future references.

> Warning:
>
> You can not paste an audio in editor from clipboard. You need to upload the audio from your local machine, or provide a link to the audio.

Try it out in [demo](/)

---

## IFrame Extended

Similar to `ImageExtended` and `VideoExtended`, you can add an iframe with a source url.

`Edra` provides an `IFramePlaceholder` component which let's you put a placeholder for future references.

> Warning:
>
> You can only add the iframe with a source url. You can not paste an iframe in editor from clipboard.

Try it out in [demo](/)

---

## Table

`Edra` component provides a way to add a table in editor. You can add it by either clicking
the `table` button in `EdraToolbar` or by using `SlashCommand` or `/table`.
By Default, a table with 3 columns and 3 rows will be added. Furthermore, you can insert _after, before or delete a column or row_.

> Error:
>
> If you click the `table` button in `EdraToolbar` or use it from `SlashCommand`, while being focused on the `table` in the editor, the current table will be deleted.

Try it out in [demo](/)

---

## Search And Replace

`Edra` component provides a way to search and replace text in the editor. You can use it by clicking the `search` button in the `EdraToolbar`. You can search a text, _match case_, _go to next match_ and _go to previous match_.

You can also _replace_ the current text or _replace all_ the text in the editor by using the `replace` button in the `EdraToolbar`.

Try it out in [demo](/)

---

## Links

`Edra` component provides an advanced link feature. By default, the links will not open on click.
The link have a `bubble menu` which let's you _edit_, _open_, _copy link_ and _delete link_.

If you want to change this behavior, you can change the `openOnClick` value in `Link.configure` function in `$lib/components/edra/editor.ts` file in **your project**. You can also find the same file here in [github](https://github.com/Tsuzat/Edra/blob/next/src/lib/edra/editor.ts).

```svelte{ga[2]%gd[3]%f[$lib/components/edra/editor.ts]}
Link.configure({
	openOnClick: true,
	openOnClick: false,
	autolink: true,
	defaultProtocol: 'https',
	HTMLAttributes: {
		target: '_blank',
		rel: 'noopener noreferrer'
	}
})
```

Try it out in [demo](/)

---

## Drag Handle

`Edra` component provides a way to _drag and drop_ handle in the editor.
You can drag a node and drop it in anywhere in the **editor**.
You can find the _drag handle_ component in `$lib/components/edra/components/DragHandle.svelte` file in **your project** and you can also find the same file here in [github](https://github.com/Tsuzat/Edra/blob/next/src/lib/edra/components/DragHandle.svelte).

> Warning:
>
> You must import the `DragHandle` component in your editor component to use it.

Try it out in [demo](/)

---

## Drag Handle Extended

`Edra` component provides an extended drag handle feature. It allows you to drag and drop a node in the editor. Moreover, it also provides few more options when clicked. You can explore it by clicking in drag handle in demo.

> Warning:
>
> You must import the `DragHandleExtended` component in your editor component to use it. This component is only available in `shadcn` ui flavor.

Try it out in [demo](/)

---

## Drag Handle Advanced

`Edra` component has a way to make the **drag handle** more advanced. You can find the
extension implementation in `$lib/edra/extensions/drag-handle/index.ts` file in **your project**. This extension allows you to have a context of currently hovered editor node
and it's position on the editor DOM. You can get this information by using the `onMouseMove` callback function.

There's a simple example

```svelte{f[my-drag-handle.svelte]}
<script lang="ts">
	let currentNode: Node | null = $state(null);
	let currentNodePos: number = $state(-1);
	let open = $state(false);

	const pluginKey = 'globalDragHandle';

	onMount(() => {
		const plugin = DragHandlePlugin({
			pluginKey: pluginKey,
			dragHandleWidth: 55,
			scrollTreshold: 100,
			dragHandleSelector: '.drag-handle',
			excludedTags: ['pre', 'code', 'table p'],
			customNodes: [],
			onMouseMove: onMouseMove
		});
		editor.registerPlugin(plugin);
		return () => editor.unregisterPlugin(pluginKey);
	});

	const onMouseMove = (data: { node: Node; pos: number }) => {
		if (data.node) currentNode = data.node;
		currentNodePos = data.pos;
	};
</script>
```

---

## LaTeX Support

`Edra` component provides a way to add LaTeX expressions in the editor. You can add them
by using `$` symbol. For example, you can write `$\sum_{i=1}^n i^2$` to get an equation.
You also click on a LaTeX expression and it will be evaluated and the result will be shown.

Try it out in [demo](/)

---

# Commands

Below is a list of all available commands that can be passed to the `<Edra />` and `<EdraToolbar />`. A full list of the commands can also be seen in `src\lib\edra\commands\toolbar-commands.ts`.

## Regular Commands

| Command            | Description                                                                            |
| ------------------ | -------------------------------------------------------------------------------------- |
| undo               | Reverts the last action.                                                               |
| redo               | Re-applies the previously undone action.                                               |
| heading1           | Toggles heading formatting at level 1.                                                 |
| heading2           | Toggles heading formatting at level 2.                                                 |
| heading3           | Toggles heading formatting at level 3.                                                 |
| link               | Prompts for a URL and creates a hyperlink for the selected text.                       |
| bold               | Toggles bold formatting for the selected text.                                         |
| italic             | Toggles italic formatting for the selected text.                                       |
| underline          | Toggles underline formatting for the selected text.                                    |
| strike             | Toggles strikethrough formatting for the selected text.                                |
| blockquote         | Toggles blockquote formatting.                                                         |
| superscript        | Toggles superscript formatting for the selected text.                                  |
| subscript          | Toggles subscript formatting for the selected text.                                    |
| code               | Toggles inline code formatting for the selected text.                                  |
| codeBlock          | Toggles code block formatting.                                                         |
| alignLeft          | Aligns the text to the left.                                                           |
| alignCenter        | Centers the text.                                                                      |
| alignRight         | Aligns the text to the right.                                                          |
| alignJustify       | Justifies the text alignment.                                                          |
| bulletList         | Toggles bullet list formatting.                                                        |
| orderedList        | Toggles ordered list formatting.                                                       |
| taskList           | Toggles task list (checklist) formatting.                                              |
| audio-placeholder  | Inserts an audio placeholder.                                                          |
| image-placeholder  | Inserts an image placeholder.                                                          |
| video-placeholder  | Inserts a video placeholder.                                                           |
| iframe-placeholder | Inserts an iframe placeholder.                                                         |
| color              | Resets or unsets the text color.                                                       |
| highlight          | Toggles highlighting for the selected text.                                            |
| table              | Inserts a 3x3 table if no table is active; deletes the table if one is already active. |
| font increment     | Increases the font size of the selected text.                                          |
| font decrement     | Decreases the font size of the selected text.                                          |

## Special Commands

| Command          | Description                                                                |
| ---------------- | -------------------------------------------------------------------------- |
| fontSize         | Buttons to increase and decrease font size and shows the current font size |
| quickColor       | Color menu to change the text color and highlight the text                 |
| searchAndReplace | Text search and replace tool                                               |
